#summary The current list of harnesses
#labels Featured

= Introduction =

This is the list of supplied harnesses.  To build your own, check out DevelopingHarnesses.


= Relational DB =
 * {{{mash-dbharness.jar}}}
|| *Harness* || *type attribute* || *Description* ||
|| [DBSetupHarness] || db || uses dbunit, runs sql ||
|| [DBWaitHarness] || db_wait || wait for a particular state in the db ||
|| [RowRunHarness] || db_row || runs a 'select `*`' on a table ||
|| [SQLRunHarness] || sql || run any sql ||

= HBase DB =
 * {{{mash-dbharness.jar}}}
|| *Harness* || *type attribute* || *Description* ||
|| [CreateTable] || hbase_create || creates hbase table ||
|| [InsertRow] || hbase_insert || insert hbase row ||
|| [DeleteTable] || hbase_delete || remove hbase table ||
|| [ScanTable] || hbase_scan || scan an hbase table for relevant rows / columns ||
|| [ValueFilterScanTable] || hbase_value_scan || filter a scan result ||
|| [UpdateRows] || hbase_update || scan table for row, apply update ||

= File =
 * {{{mash-fileharness.jar}}}
|| *Harness* || *type attribute* || *Description* ||
|| [FileGetHarness] ||| || retrieve a file ||
|| [FileListHarness] ||| || list files ||
|| [FileDeleteHarness] || || remove file ||
|| [FileCopyHarness] || || copy a file from source to target ||
|| [FileWaitHarness] || || wait for a file to get written ||
|| [FileVerifyHarness] || || compare contents of a file ||

= Ftp =
 * {{{mash_ftpharness.jar}}}
  * [FtpRunHarness FTPRunHarness] (invokes ftp requests)
  * GetHarness (gets a file)
  * ListHarness (lists files)
  * PutHarness (puts a file on a server)
  * DeleteHarness (removes a directory or file)
  * [FtpVerifyListHarness FTPVerifyListHarness] (used by ListHarness, verifies files are present)
  * [FtpWaitHarness FTPWaitHarness] (wait for a file to be there)
   * check path (file or directory) and wait until it exists

= Http =
 * {{{mash_httpharness.jar}}}
  * HttpRunHarness (invokes http requests)
  * HttpVerifyHarness

= Email =
 * {{{mash_mailharness.jar}}}
  * [GetIMAPEmail] (email client for retrieving messages)
  * [IMAPSetupHarness] (cleaning out an inbox before testing)

= REST =
 * {{{mash_httpharness.jar}}}
  * RestRunHarness (invokes http requests in a restful manner)
  * RestResponse (for running xpath queries)

= Messaging =
 * {{{mash_messageharness.jar}}}
  * [XmlJMSHarness] (send and receive xml files on JMS queue)
  * [TextJMSHarness] (send and receive text files on JMS queue)
  * [ObjectJMSHarness] (receive Java objects from JMS queue)
  * [JMSSetupHarness] (clean a queue)

= Core =
 * {{{mash_core.jar}}}
  * StandardVerifyHarness
  * ListVerifyHarness

= Utilities =
 * {{{mash_utilityharness.jar}}}
  * TimedWaitRunHarness (wait some amount of time)
  * CommandExecutorHarness (execute a command on command line)
  * CommandExecuterVerifyHarness (verify the output of a command)

= Teardown =